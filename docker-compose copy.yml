version: '3.8'
services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${SQL_DATABASE}
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5


  redis:
    image: "redis:alpine"
    volumes:
      - redis_data:/data

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    # On remplace 'build: .' par 'image:'
    image: datagod1999/trading-bot-app-2:latest
    
    # La commande de démarrage est cruciale
    command: sh -c "python manage.py migrate --noinput && 
             gunicorn trading_bot.wsgi:application --bind 0.0.0.0:8000"
    
    # Les volumes restent importants pour les fichiers modifiables
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./screenshots:/app/screenshots 
      - ./Trading_cookies.json:/app/Trading_cookies.json # Assure-toi que ce fichier existe localement
      - ./app_trading_bot.log:/app/app_trading_bot.log   # Idem, crée un fichier vide si besoin
    ports:
      - "${WEB_PORT:-8000}:8000"
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file: .env 
    restart: unless-stopped

  # LE WORKER CELERY - modifié pour utiliser la MÊME image pré-construite
  celery_worker:
    # On utilise exactement la même image
    image: datagod1999/trading-bot-app-2:latest # <--- TON IMAGE SUR DOCKER HUB
    
    # La commande est différente ! C'est elle qui définit le rôle de ce conteneur.
    # On utilise la commande de diagnostic pour commencer.
    command: sh -c "echo '--- Starting Celery Worker Container ---' && 
             celery -A trading_bot worker -l info -c 1" # On revient à -l info pour l'instant
    
    # Les volumes doivent être les mêmes pour qu'il ait accès aux mêmes fichiers
    volumes:
      - ./screenshots:/app/screenshots 
      - ./Trading_cookies.json:/app/Trading_cookies.json
      - ./app_trading_bot.log:/app/app_trading_bot.log
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file: .env
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
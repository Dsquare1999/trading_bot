version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${SQL_DATABASE}
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    image: datagod1999/trading-bot-app-2:latest
    command: sh -c "python manage.py migrate --noinput && gunicorn trading_bot.wsgi:application --bind 0.0.0.0:8000"
    expose:
      - "8000"   # On expose le port interne au proxy Nginx
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./screenshots:/app/screenshots
      - ./Trading_cookies.json:/app/Trading_cookies.json
      - ./app_trading_bot.log:/app/app_trading_bot.log
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=app.lephenix.bj         # ðŸ‘ˆ ton sous-domaine Cloudflare
      - LETSENCRYPT_HOST=app.lephenix.bj     # ðŸ‘ˆ mÃªme sous-domaine
      - LETSENCRYPT_EMAIL=mail@lephenix.bj  # ðŸ‘ˆ ton adresse email pour Let's Encrypt
    networks:
      - webnet

  celery_worker:
    image: datagod1999/trading-bot-app-2:latest
    command: sh -c "echo '--- Starting Celery Worker ---' && celery -A trading_bot worker -l info -c 1"
    volumes:
      - ./screenshots:/app/screenshots
      - ./Trading_cookies.json:/app/Trading_cookies.json
      - ./app_trading_bot.log:/app/app_trading_bot.log
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    restart: unless-stopped
    networks:
      - webnet

  nginx-proxy:
    image: jwilder/nginx-proxy:latest
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs:ro
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    networks:
      - webnet

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-proxy-acme
    restart: always
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
      - DEFAULT_EMAIL=mail@lephenix.bj
    volumes_from:
      - nginx-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_certs:/etc/nginx/certs:rw
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    networks:
      - webnet

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  nginx_certs:
  nginx_vhost:
  nginx_html:

networks:
  webnet:
    driver: bridge
